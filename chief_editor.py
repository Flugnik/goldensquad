# chief_editor.py ‚Äî –í–µ—Ä—Å–∏—è 4.1. –®–µ—Ñ –õ–µ–æ–Ω —Å API –Ω–∞ FastAPI.
# –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å, –≥–æ—Ç–æ–≤—ã–π –∫ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å –∫–æ–º–∞–Ω–¥–æ–π.

import asyncio
import json
import os
import re
import sys
from typing import List, Optional

import anthropic
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import uvicorn

# --------------------------------------------------------------------------- #
#                     Pydantic-–º–æ–¥–µ–ª–∏ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤                   #
# --------------------------------------------------------------------------- #
class TopicsRequest(BaseModel):
    business_theme: str = Field(..., min_length=2, max_length=120)
    count: int = Field(5, ge=1, le=10)


class TextDraftRequest(BaseModel):
    topic: str = Field(..., min_length=2, max_length=120)
    business_theme: Optional[str] = ""


# --------------------------------------------------------------------------- #
#                              –õ–æ–≥–∏–∫–∞ –®–µ—Ñ–∞ –õ–µ–æ–Ω–∞                              #
# --------------------------------------------------------------------------- #
class ChiefEditor:
    def __init__(self) -> None:
        self.model_name = os.getenv("CHIEF_EDITOR_MODEL", "claude-4-sonnet-20250501")
        self.claude_api_key = os.getenv("CLAUDE_API_KEY")

        if not self.claude_api_key:
            raise RuntimeError("CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

        self.client = anthropic.AsyncAnthropic(api_key=self.claude_api_key)
        self.personality = self._load_personality()
        self.constitution = self.personality["constitution"]

        print(
            f"‚úÖ –®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä v4.1 ({self.personality['name']}) "
            f"–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: {self.model_name}",
            file=sys.stderr,
        )

    # ---------- –ª–∏—á–Ω–æ—Å—Ç—å --------------------------------------------------- #
    @staticmethod
    def _load_personality() -> dict:
        return {
            "name": "–õ–µ–æ–Ω –ú—É—Ä–∞–∫–∞–º–∏",
            "constitution": (
                "–¢—ã ‚Äî –®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä –õ–µ–æ–Ω –ú—É—Ä–∞–∫–∞–º–∏. "
                "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º, "
                "—Ñ–æ—Ä–º–∏—Ä—É—è –∏–¥–µ–∏ –∏ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –∫–æ–º–∞–Ω–¥—ã. "
                "–ü–∏—à–∏ —á—ë—Ç–∫–æ, –ø–æ-–¥–µ–ª—É –∏ –ø–æ-–¥–µ–ª–æ–≤–æ–º—É."
            ),
        }

    # ---------- –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ------------------------------------- #
    @staticmethod
    def _extract_json(text: str) -> Optional[List[str]]:
        """–ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å JSON-–º–∞—Å—Å–∏–≤ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏."""
        try:
            match = re.search(r"\[.*?]", text, re.S)
            return json.loads(match.group(0)) if match else None
        except json.JSONDecodeError:
            return None

    async def _ask_claude(self, prompt: str, max_tokens: int = 1024) -> str:
        """–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –æ–±—â–µ–Ω–∏—è —Å Anthropic API."""
        response = await self.client.messages.create(
            model=self.model_name,
            max_tokens=max_tokens,
            system=self.constitution,
            messages=[{"role": "user", "content": prompt}],
        )
        return response.content[0].text.strip()

    # ---------- –ø—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ------------------------------------------- #
    async def generate_topics(self, business_theme: str, count: int) -> List[str]:
        prompt = (
            f"–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π {count} —Å–≤–µ–∂–∏—Ö –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø–æ—Å—Ç–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é "
            f"¬´{business_theme}¬ª. –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ **—Å—Ç—Ä–æ–≥–æ** –∫–∞–∫ JSON-–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –±–µ–∑ "
            f"–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."
        )
        raw = await self._ask_claude(prompt)
        topics = self._extract_json(raw)
        if not topics:
            raise ValueError("Claude –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON-–º–∞—Å—Å–∏–≤–∞.")
        return topics[:count]

    async def create_task_for_copywriter(self, topic: str, business_theme: str) -> str:
        prompt = (
            "–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∫—Ä–∞—Ç–∫–æ–µ, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ –¢–ó –¥–ª—è –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞.\n\n"
            f"–¢–µ–º–∞ –ø–æ—Å—Ç–∞: ¬´{topic}¬ª.\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –±–∏–∑–Ω–µ—Å–∞: ¬´{business_theme or '‚Äî'}¬ª.\n\n"
            "–§–æ—Ä–º–∞—Ç: 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ß—ë—Ç–∫–æ –æ–±–æ–∑–Ω–∞—á—å —Ü–µ–ª—å –∏ –∫–ª—é—á–µ–≤–æ–π –ø–æ—Å—ã–ª."
        )
        return await self._ask_claude(prompt, max_tokens=256)


# --------------------------------------------------------------------------- #
#                           –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è FastAPI-—Å–µ—Ä–≤–µ—Ä–∞                      #
# --------------------------------------------------------------------------- #
app = FastAPI(title="Golden Squad ‚Äî Chief Editor API", version="4.1")
editor = ChiefEditor()


@app.get("/health", tags=["system"])
async def health():
    return {"status": "ok"}


@app.post("/generate_topics", tags=["workflow"])
async def api_generate_topics(req: TopicsRequest):
    try:
        topics = await editor.generate_topics(req.business_theme, req.count)
        return {"topics": topics}
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))


@app.post("/create_task", tags=["workflow"])
async def api_create_task(req: TextDraftRequest):
    try:
        task = await editor.create_task_for_copywriter(req.topic, req.business_theme)
        return {"task_for_copywriter": task}
    except Exception as exc:
        raise HTTPException(status_code=500, detail=str(exc))


# --------------------------------------------------------------------------- #
#                               –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞                                   #
# --------------------------------------------------------------------------- #
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –®–µ—Ñ–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –õ–µ–æ–Ω–∞‚Ä¶")
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
