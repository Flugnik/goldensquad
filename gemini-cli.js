#!/usr/bin/env node
const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');
const path = require('path');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
const apiKey = process.env.GEMINI_API_KEY || 'AIzaSyA1C9K8pXOfkbjJmwFKIrh38GcB1QFF9Qo';
if (!apiKey) {
    console.error('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
}

const genAI = new GoogleGenerativeAI(apiKey);

async function generateContent(prompt, options = {}) {
    try {
        const model = genAI.getGenerativeModel({ 
            model: options.model || "gemini-pro",
            generationConfig: {
                temperature: options.temperature || 0.8,
                topK: options.topK || 40,
                topP: options.topP || 0.95,
                maxOutputTokens: options.maxTokens || 2048,
            }
        });

        console.log('ü§ñ Gemini –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç...');
        const result = await model.generateContent(prompt);
        const response = await result.response;
        
        console.log('\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:');
        console.log('=' * 50);
        console.log(response.text());
        console.log('=' * 50);
        
        return response.text();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error.message);
        if (error.message.includes('API_KEY')) {
            console.error('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        }
        process.exit(1);
    }
}

async function main() {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(`
ü§ñ Gemini CLI –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞"

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node gemini-cli.js "–≤–∞—à –ø—Ä–æ–º–ø—Ç"
  
–ü—Ä–∏–º–µ—Ä—ã:
  node gemini-cli.js "–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –ø—Ä–æ –∑–∏–º–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ —Å–≤–∏–Ω–µ–π"
  node gemini-cli.js "–ù–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ—Å—Ç–∞ –ø—Ä–æ –≤—ã–±–æ—Ä –ø–æ—Ä–æ—Å—è—Ç"
  
–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  GEMINI_API_KEY - –∫–ª—é—á Google AI API
        `);
        return;
    }
    
    const prompt = args.join(' ');
    await generateContent(prompt);
}

if (require.main === module) {
    main();
}

module.exports = { generateContent };
