# telegram_bot.py - –í–µ—Ä—Å–∏—è 4.0. "–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞" –≤ –ø–æ–ª–Ω–æ–º —Å–±–æ—Ä–µ.
# –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º: –õ–µ–æ–Ω -> –ï–≤–∞ -> –ê–¥—Ä–∏–∞–Ω.

import logging
import os
import httpx
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
logging.basicConfig(format='%(asctime)s | %(name)s | %(levelname)s | %(message)s', level=logging.INFO)
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_MSG_LIMIT = 4000

# –ê–¥—Ä–µ—Å–∞ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker-—Å–µ—Ç–∏
CHIEF_EDITOR_URL = "http://chief-editor:8000"
COPYWRITER_URL = "http://copywriter:8001"
DESIGNER_URL = "http://designer:8002" # –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫

class UserState:
    IDLE, AWAITING_TOPIC_CHOICE = range(2)

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API –∞–≥–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def call_api(service_url: str, endpoint: str, payload: dict):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API –Ω–∞—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤."""
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(f"{service_url}/{endpoint}", json=payload, timeout=180.0) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            response.raise_for_status()
            return response.json()
    except httpx.RequestError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ API {e.request.url!r}: {e}")
        return {"error": f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞–≥–µ–Ω—Ç—É."}
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: {e}")
        return {"error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞."}

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ ---
class GoldenTeamBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self._register_handlers()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("üèÜ **–°–∏—Å—Ç–µ–º–∞ '–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞' –∞–∫—Ç–∏–≤–Ω–∞!**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create <—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å–∞> –¥–ª—è –Ω–∞—á–∞–ª–∞.", parse_mode='Markdown')

    async def create(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        business_theme = " ".join(context.args)
        if not business_theme:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –±–∏–∑–Ω–µ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /create –≠–ª–∏—Ç–Ω—ã–µ –∫–æ—Ä–º–∞ –¥–ª—è —Å–æ–±–∞–∫")
            return

        context.chat_data['business_theme'] = business_theme
        message = await update.message.reply_text(f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ. –°–≤—è–∑—ã–≤–∞—é—Å—å —Å –®–µ—Ñ–æ–º –õ–µ–æ–Ω–æ–º...")
        
        payload = {"business_theme": business_theme, "count": 5}
        result = await call_api(CHIEF_EDITOR_URL, "generate_topics", payload)

        if "error" not in result and "topics" in result:
            context.chat_data['generated_topics'] = result['topics']
            context.chat_data['state'] = UserState.AWAITING_TOPIC_CHOICE
            keyboard = [[InlineKeyboardButton(topic[:60], callback_data=f"topic_idx:{i}")] for i, topic in enumerate(result['topics'])]
            await message.edit_text("üéØ **–õ–µ–æ–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –∏–¥–µ–∏. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞:**", reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await message.edit_text(f"‚ùå **–û—à–∏–±–∫–∞:** {result.get('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã –æ—Ç –®–µ—Ñ–∞.')}")

    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        data = query.data

        if data.startswith("topic_idx:"):
            if context.chat_data.get('state') != UserState.AWAITING_TOPIC_CHOICE:
                await query.edit_message_text("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=None)
                return

            await query.edit_message_text("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä–∞–±–æ—Ç–µ...", reply_markup=None)
            
            topic_index = int(data.split(":", 1)[1])
            selected_topic = context.chat_data.get('generated_topics', [])[topic_index]
            business_theme = context.chat_data.get('business_theme', '')

            # --- –≠–¢–ê–ü 1: –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –æ—Ç –®–µ—Ñ–∞ ---
            await query.message.reply_text(f"‚è≥ **–®–∞–≥ 1/3:** –õ–µ–æ–Ω —Å—Ç–∞–≤–∏—Ç –∑–∞–¥–∞—á—É –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä—É...")
            task_payload = {"topic": selected_topic, "business_theme": business_theme}
            task_result = await call_api(CHIEF_EDITOR_URL, "create_task", task_payload)

            if "error" in task_result:
                await query.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 1:** {task_result.get('error')}")
                return
            task_for_copywriter = task_result.get('task_for_copywriter')

            # --- –≠–¢–ê–ü 2: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ ---
            await query.message.reply_text(f"‚è≥ **–®–∞–≥ 2/3:** –ï–≤–∞ –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç...")
            write_payload = {"task_from_chief": task_for_copywriter}
            post_result = await call_api(COPYWRITER_URL, "write_post", write_payload)

            if "error" in post_result:
                await query.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 2:** {post_result.get('error')}")
                return
            final_text = post_result.get('post_text')

            # --- –≠–¢–ê–ü 3: –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –î–∏–∑–∞–π–Ω–µ—Ä–∞ ---
            await query.message.reply_text(f"‚è≥ **–®–∞–≥ 3/3:** –ê–¥—Ä–∏–∞–Ω —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª...")
            image_payload = {
                "task_from_chief": task_for_copywriter,
                "post_text": final_text,
                "topic": selected_topic
            }
            image_result = await call_api(DESIGNER_URL, "create_image", image_payload)

            if "error" in image_result:
                await query.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 3:** {image_result.get('error')}")
                # –î–∞–∂–µ –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å, –ø–æ–∫–∞–∂–µ–º —Ç–µ–∫—Å—Ç
                await query.message.reply_text("–ù–æ —Ç–µ–∫—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤:")
                for i in range(0, len(final_text), TELEGRAM_MSG_LIMIT):
                    await query.message.reply_text(final_text[i:i + TELEGRAM_MSG_LIMIT])
                return

            # --- –§–ò–ù–ê–õ: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç ---
            final_image_url = image_result.get('image_url')
            await query.message.reply_text("üéâ **–ì–æ—Ç–æ–≤–æ! –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.**")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —Ç–µ–∫—Å—Ç
            await query.message.reply_photo(photo=final_image_url, caption=f"**–¢–µ–º–∞:** {selected_topic}")
            for i in range(0, len(final_text), TELEGRAM_MSG_LIMIT):
                await query.message.reply_text(final_text[i:i + TELEGRAM_MSG_LIMIT])

            context.chat_data.clear()

    def _register_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("create", self.create))
        self.app.add_handler(CallbackQueryHandler(self.on_callback))

    def run(self):
        print("üöÄ Telegram-–±–æ—Ç v4.0 ('–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞' –≤ —Å–±–æ—Ä–µ) –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    GoldenTeamBot().run()
