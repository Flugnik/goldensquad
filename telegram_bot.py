# telegram_bot.py - –í–µ—Ä—Å–∏—è 5.5. "–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞" —Å –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–æ–π: –õ–µ–æ–Ω ‚Üí –ï–≤–∞ ‚Üí –ê–¥—Ä–∏–∞–Ω ‚Üí designer-fal
# –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∏–∑—É–∞–ª–∞ —á–µ—Ä–µ–∑ Fal.ai.
import logging
import os
import uuid
import asyncio
import httpx
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv
from enum import IntEnum

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from utils.supabase_logger import logger
except ImportError:
    logger = None
    logging.warning("‚ö†Ô∏è –ú–æ–¥—É–ª—å supabase_logger –Ω–µ –Ω–∞–π–¥–µ–Ω. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Supabase –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s| %(name)s| %(levelname)s| %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_MSG_LIMIT = 4000

# –ê–¥—Ä–µ—Å–∞ –Ω–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ Docker-—Å–µ—Ç–∏
CHIEF_EDITOR_URL = "http://chief-editor:8000"
COPYWRITER_URL = "http://copywriter:8001"
DESIGNER_URL = "http://designer:8002"

# –ü—É—Ç—å –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
RESULTS_DIR = os.getenv('RESULTS_DIR', '/app/results')
LATEST_VISUAL_PATH = os.path.join(RESULTS_DIR, 'latest_visual.txt')
PENDING_PROMPT_PATH = os.path.join(RESULTS_DIR, 'pending_prompt.txt')

# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(IntEnum):
    IDLE = 0
    AWAITING_TOPIC_CHOICE = 1
    WAITING_FOR_COPY = 2
    WAITING_FOR_VISUAL = 3


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ API –∞–≥–µ–Ω—Ç–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async def call_api(service_url: str, endpoint: str, payload: dict, topic_id: str = None, user_id: str = None):
    start_time = asyncio.get_event_loop().time()
    try:
        async with httpx.AsyncClient(timeout=180.0) as client:
            response = await client.post(f"{service_url}/{endpoint}", json=payload)
            response.raise_for_status()
            result = response.json()
        elapsed_ms = int((asyncio.get_event_loop().time() - start_time) * 1000)

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤
        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type=f"api_call_{endpoint}",
                    input_data={"service": service_url, "endpoint": endpoint, "payload_keys": list(payload.keys())},
                    output_data={"response_keys": list(result.keys()) if isinstance(result, dict) else str(result)[:200]},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage="api_communication",
                    status="success"
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞: {e}")

        return result

    except httpx.RequestError as e:
        elapsed_ms = int((asyncio.get_event_loop().time() - start_time) * 1000)
        error_msg = f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ {service_url}: {str(e)}"
        logging.error(error_msg)

        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type=f"api_call_{endpoint}",
                    input_data={"service": service_url, "endpoint": endpoint, "payload": payload},
                    output_data={"error": str(e)},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage="api_communication",
                    status="error",
                    error_message=str(e)
                )
            except Exception as log_e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ API: {log_e}")

        return {"error": error_msg}

    except Exception as e:
        elapsed_ms = int((asyncio.get_event_loop().time() - start_time) * 1000)
        error_msg = f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg)

        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type=f"api_call_{endpoint}",
                    input_data={"service": service_url, "endpoint": endpoint, "payload": payload},
                    output_data={"error": str(e)},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage="api_communication",
                    status="error",
                    error_message=str(e)
                )
            except Exception as log_e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {log_e}")

        return {"error": error_msg}


# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞
class GoldenTeamBot:
    def __init__(self):
        if not BOT_TOKEN:
            raise RuntimeError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        self.app = Application.builder().token(BOT_TOKEN).build()
        self._register_handlers()

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type="bot_initialized",
                    input_data={"version": "5.5"},
                    output_data={"services": [CHIEF_EDITOR_URL, COPYWRITER_URL, DESIGNER_URL]},
                    elapsed_ms=0,
                    stage="initialization",
                    status="success"
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")

    def _register_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("create", self.create))
        self.app.add_handler(CallbackQueryHandler(self.on_callback))

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = str(update.effective_user.id)
        # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç
        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type="command_start",
                    input_data={"user_id": user_id},
                    output_data={"response": "start_message_sent"},
                    elapsed_ms=0,
                    stage="user_interaction",
                    status="success"
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã start: {e}")

        await update.message.reply_text(
            "üèÜ **–°–∏—Å—Ç–µ–º–∞ '–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞' v5.5 –∞–∫—Ç–∏–≤–Ω–∞!**\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/create <—Ç–µ–º–∞ –±–∏–∑–Ω–µ—Å–∞>` –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            parse_mode='Markdown'
        )

    async def create(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        business_theme = " ".join(context.args)
        user_id = str(update.effective_user.id)

        if not business_theme:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –±–∏–∑–Ω–µ—Å–∞. –ü—Ä–∏–º–µ—Ä: `/create —Å–≤–∏–Ω–æ–≤–æ–¥—Å—Ç–≤–æ`")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        context.chat_data['business_theme'] = business_theme
        context.chat_data['user_id'] = user_id
        context.chat_data['topic_id'] = str(uuid.uuid4())
        context.chat_data['state'] = UserState.AWAITING_TOPIC_CHOICE  # <-- –£–°–¢–ê–ù–û–í–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø

        await update.message.reply_text("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–º—ã...")

        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º —á–µ—Ä–µ–∑ –®–µ—Ñ–∞
        payload = {"business_theme": business_theme}
        topic_result = await call_api(CHIEF_EDITOR_URL, "generate_topics", payload, topic_id=context.chat_data['topic_id'], user_id=user_id)

        if "error" in topic_result:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {topic_result['error']}")
            return

        topics = topic_result.get("topics", [])
        if not topics:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã.")
            return

        context.chat_data['generated_topics'] = topics

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏
        keyboard = []
        for i, topic in enumerate(topics):
            keyboard.append([InlineKeyboardButton(topic[:60], callback_data=f"topic:{i}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=reply_markup)

    async def on_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()  # –í–∞–∂–Ω–æ: –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback
        data = query.data
        user_id = str(update.effective_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if context.chat_data.get('state') != UserState.AWAITING_TOPIC_CHOICE:
            await query.edit_message_text("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.", reply_markup=None)
            return

        if not data.startswith("topic:"):
            return

        await query.edit_message_text("‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Å—Ç—É–ø–∞–µ—Ç –∫ —Ä–∞–±–æ—Ç–µ...", reply_markup=None)
        topic_index = int(data.split(":", 1)[1])
        selected_topic = context.chat_data.get('generated_topics', [])[topic_index]
        business_theme = context.chat_data.get('business_theme', '')
        topic_id = context.chat_data.get('topic_id', str(uuid.uuid4))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.chat_data['selected_topic'] = selected_topic
        context.chat_data['state'] = UserState.WAITING_FOR_COPY

        # 2. –¢–µ–∫—Å—Ç –æ—Ç –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞
        text_payload = {"topic": selected_topic, "business_theme": business_theme}
        text_result = await call_api(COPYWRITER_URL, "generate_text", text_payload, topic_id=topic_id, user_id=user_id)

        if "error" in text_result:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 2 (—Ç–µ–∫—Å—Ç): {text_result['error']}")
            return

        final_text = text_result.get('text', '')
        if not final_text:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç.")
            return

        # 3. –ü—Ä–æ–º–ø—Ç –æ—Ç –î–∏–∑–∞–π–Ω–µ—Ä–∞
        visual_payload = {"topic": selected_topic, "text": final_text}
        visual_result = await call_api(DESIGNER_URL, "make_visual", visual_payload, topic_id=topic_id, user_id=user_id)

        if "error" in visual_result:
            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ 3 (–ø—Ä–æ–º–ø—Ç): {visual_result['error']}")
            return

        prompt = visual_result.get('visual_result', '')
        if not prompt:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∞.")
            return

        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª–∞ —á–µ—Ä–µ–∑ designer-fal
        await query.message.reply_text("üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª —á–µ—Ä–µ–∑ Fal.ai...")

        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if os.path.exists(LATEST_VISUAL_PATH):
            os.remove(LATEST_VISUAL_PATH)

        # –ü–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç –≤ —Ñ–∞–π–ª
        try:
            with open(PENDING_PROMPT_PATH, "w", encoding="utf-8") as f:
                f.write(prompt)
        except Exception as e:
            await query.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç –≤ designer-fal: {e}")
            return

        # –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = None
        timeout = 120
        start_wait = time.time()
        while time.time() - start_wait < timeout:
            if os.path.exists(LATEST_VISUAL_PATH):
                try:
                    with open(LATEST_VISUAL_PATH, "r", encoding="utf-8") as f:
                        image_url = f.read().strip()
                    if image_url:
                        break
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è LATEST_VISUAL_PATH: {e}")
            await asyncio.sleep(2)

        if not image_url:
            await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É–∞–ª –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
        else:
            await query.message.reply_photo(photo=image_url, caption="üé® –ì–æ—Ç–æ–≤—ã–π –≤–∏–∑—É–∞–ª")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        for i in range(0, len(final_text), TELEGRAM_MSG_LIMIT):
            await query.message.reply_text(final_text[i:i + TELEGRAM_MSG_LIMIT])

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        if logger:
            try:
                logger.log_event(
                    agent_name="telegram-bot",
                    event_type="workflow_completed",
                    input_data={"selected_topic": selected_topic, "user_id": user_id},
                    output_data={"text_length": len(final_text), "visual_created": bool(image_url)},
                    elapsed_ms=0,
                    topic_id=topic_id,
                    stage="workflow_completion",
                    status="success",
                    business_theme=business_theme
                )
            except Exception as e:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è workflow: {e}")

        await query.message.reply_text("üéâ **–ì–æ—Ç–æ–≤–æ! –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.**")

    def run(self):
        logging.info("üöÄ Telegram-–±–æ—Ç v5.5 ('–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞' —Å –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–æ–π) –∑–∞–ø—É—â–µ–Ω!")
        self.app.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    GoldenTeamBot().run()