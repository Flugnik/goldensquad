# copywriter.py - –í–µ—Ä—Å–∏—è 2.1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å OpenRouter API –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

import asyncio
import os
import sys
import logging
from functools import lru_cache
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded
import uvicorn
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Rate limiting
limiter = Limiter(key_func=get_remote_address)

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class WritePostRequest(BaseModel):
    task_from_chief: str = Field(min_length=10, description="Task description from chief editor")
    brand_voice_info: str = Field(default="", description="Brand voice and additional context")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ ---
class Copywriter:
    def __init__(self):
        self.model_name = os.getenv('COPYWRITER_MODEL', 'anthropic/claude-sonnet-4')
        self.max_tokens = int(os.getenv('MAX_TOKENS', '2500'))
        self.api_key = self.read_secret('openrouter_api_key')
        self.client = openai.AsyncOpenAI(
            api_key=self.api_key,
            base_url=os.getenv('API_BASE_URL', 'https://openrouter.ai/api/v1')
        )
        self.constitution = self.load_constitution()
        logger.info("Copywriter initialized successfully")

    def read_secret(self, secret_name: str) -> str:
        """–ß–∏—Ç–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç –∏–∑ Docker Secrets –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            with open(f'/run/secrets/{secret_name}', 'r') as f:
                return f.read().strip()
        except FileNotFoundError:
            # Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            env_var = secret_name.upper().replace('_', '_')
            api_key = os.getenv('OPENROUTER_API_KEY')
            if not api_key:
                raise ValueError(f"Neither secret file nor env var found for {secret_name}")
            return api_key

    @lru_cache(maxsize=1)
    def load_constitution(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç constitution —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        constitution = {
            "professional_core": self.load_file('personas/copywriter/Alina_Persona.txt', required=True),
            "client_dna": self.load_file('client_profiles/nikolay_dna.txt', required=False),
            "search_methods": self.load_file('personas/copywriter/Poisk-informacii.txt', required=False)
        }
        
        logger.info("Constitution loaded successfully")
        for k, v in constitution.items():
            logger.debug(f"{k}: {len(v)} characters loaded")
        
        return constitution

    def load_file(self, path: str, required: bool = False) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            with open(path, encoding='utf-8') as f:
                content = f.read()
                logger.info(f"Loaded file: {path} ({len(content)} chars)")
                return content
        except FileNotFoundError:
            if required:
                logger.error(f"Required file not found: {path}")
                raise FileNotFoundError(f"Critical file missing: {path}")
            else:
                logger.warning(f"Optional file not found: {path}")
                return ""

    def build_system_prompt(self) -> str:
        """–°—Ç—Ä–æ–∏—Ç system prompt –∏–∑ constitution"""
        return f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –ê–ª–∏–Ω–∞ –°–æ–º–æ–≤–∞.

{self.constitution['professional_core']}

–î–ù–ö –∫–ª–∏–µ–Ω—Ç–∞:
{self.constitution['client_dna']}

–ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã:
{self.constitution['search_methods']}""".strip()

    async def write_post(self, task_from_chief: str, brand_voice_info: str = ""):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç —à–µ—Ñ–∞"""
        logger.info(f"Processing writing task: {task_from_chief[:100]}...")
        
        user_prompt = f"""
–ó–ê–î–ê–ù–ò–ï –û–¢ –®–ï–§–ê:
{task_from_chief}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–†–ï–ù–î–ï:
{brand_voice_info}

–ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏."""

        try:
            response = await self.client.chat.completions.create(
                model=self.model_name,
                max_tokens=self.max_tokens,
                system=self.build_system_prompt(),
                messages=[{"role": "user", "content": user_prompt}],
                temperature=0.7
            )
            
            result = response.choices[0].message.content.strip()
            logger.info(f"Successfully generated post ({len(result)} chars)")
            return {"post_text": result}
            
        except openai.AuthenticationError:
            logger.error("Authentication failed with OpenRouter API")
            raise HTTPException(status_code=401, detail="API authentication failed")
        except openai.RateLimitError:
            logger.error("Rate limit exceeded")
            raise HTTPException(status_code=429, detail="Rate limit exceeded, please try again later")
        except openai.APITimeoutError:
            logger.error("API timeout")
            raise HTTPException(status_code=504, detail="API request timeout")
        except Exception as e:
            logger.error(f"Unexpected error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ FastAPI –∏ –∞–≥–µ–Ω—Ç–∞ ---
app = FastAPI(title="Copywriter Eva API", version="2.1")
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

writer = Copywriter()

# --- Health-—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π API ---
@app.get("/health", tags=["system"])
async def health():
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        await writer.client.models.list()
        return {"status": "ok", "api_connection": "healthy"}
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {"status": "degraded", "api_connection": "unhealthy", "error": str(e)}

# --- API-—Ç–æ—á–∫–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ---
@app.post("/write_post", tags=["copywriting"])
@limiter.limit("10/minute")
async def api_write_post(request: WritePostRequest):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞"""
    result = await writer.write_post(request.task_from_chief, request.brand_voice_info)
    return result

# --- –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –ê–ª–∏–Ω—ã...")
    uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")
