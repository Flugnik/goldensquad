const { GoogleGenerativeAI } = require('@google/generative-ai');

const apiKey = 'AIzaSyA1C9K8pXOfkbjJmwFKIrh38GcB1QFF9Qo';
const genAI = new GoogleGenerativeAI(apiKey);

async function listAvailableModels() {
    try {
        console.log('üîç –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π...');
        
        const models = await genAI.listModels();
        
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        console.log('=' * 50);
        
        models.forEach((model, index) => {
            console.log(`${index + 1}. ${model.name}`);
            if (model.description) {
                console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${model.description}`);
            }
            console.log('');
        });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π:', error.message);
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        console.log('\nüîÑ –ü—Ä–æ–±—É–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–æ–¥–µ–ª–∏:');
        const testModels = [
            'gemini-1.5-flash',
            'gemini-1.5-pro', 
            'gemini-1.0-pro',
            'models/gemini-pro',
            'models/gemini-1.5-flash'
        ];
        
        for (const modelName of testModels) {
            try {
                const model = genAI.getGenerativeModel({ model: modelName });
                const result = await model.generateContent('–¢–µ—Å—Ç');
                console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${modelName} - –†–ê–ë–û–¢–ê–ï–¢`);
                break;
            } catch (err) {
                console.log(`‚ùå –ú–æ–¥–µ–ª—å ${modelName} - –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞`);
            }
        }
    }
}

listAvailableModels();
