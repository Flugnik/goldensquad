# utils/supabase_logger.py
# –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Golden Squad —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Supabase

import os
import json
import uuid
import time
import sys
from datetime import datetime
from typing import Dict, Any, Optional, List
from supabase import create_client, Client
import asyncio
from functools import wraps

class SupabaseLogger:
    def __init__(self):
        self.supabase_url = os.getenv('SUPABASE_URL')
        self.supabase_key = os.getenv('SUPABASE_KEY')  # service_role key
        
        if not self.supabase_url or not self.supabase_key:
            raise RuntimeError("SUPABASE_URL –∏ SUPABASE_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        self.client: Client = create_client(self.supabase_url, self.supabase_key)
        print(f"‚úÖ SupabaseLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. URL: {self.supabase_url[:50]}...", file=sys.stderr)

    def log_event(self, 
                 agent_name: str,
                 event_type: str,
                 input_data: Dict[str, Any],
                 output_data: Dict[str, Any],
                 elapsed_ms: int,
                 topic_id: Optional[str] = None,
                 stage: Optional[str] = None,
                 business_theme: Optional[str] = None,
                 status: str = "success",
                 error_message: Optional[str] = None,
                 imperatives_check: bool = False,
                 constitution_files: Optional[Dict] = None,
                 reporting_blocks_present: bool = False,
                 warnings: Optional[List] = None) -> str:
        """
        –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Supabase –ª–æ–≥
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∑–∞–ø–∏—Å–∏
        """
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            if not topic_id:
                topic_id = str(uuid.uuid4())
            
            log_entry = {
                "topic_id": topic_id,
                "request_id": str(uuid.uuid4()),
                "agent_name": agent_name,
                "event_type": event_type,
                "stage": stage,
                "input_data": input_data,
                "output_data": output_data,
                "elapsed_ms": elapsed_ms,
                "business_theme": business_theme,
                "status": status,
                "error_message": error_message,
                "imperatives_check": imperatives_check,
                "constitution_files_loaded": constitution_files or {},
                "reporting_blocks_present": reporting_blocks_present,
                "warnings": warnings or []
            }
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Supabase
            result = self.client.table('agent_workflow_log').insert(log_entry).execute()
            
            if result.data:
                record_id = result.data[0]['id']
                print(f"üìù –õ–æ–≥ –∑–∞–ø–∏—Å–∞–Ω: {agent_name}/{event_type} -> {record_id}", file=sys.stderr)
                return record_id
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –≤ Supabase: {result}", file=sys.stderr)
                return ""
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", file=sys.stderr)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ Supabase - –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∫–∞–∫ fallback
            self._fallback_log(agent_name, event_type, input_data, output_data, elapsed_ms)
            return ""

    def _fallback_log(self, agent_name: str, event_type: str, input_data: Dict, output_data: Dict, elapsed_ms: int):
        """Fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        try:
            fallback_entry = {
                "timestamp": datetime.now().isoformat(),
                "agent_name": agent_name,
                "event_type": event_type,
                "input_data": input_data,
                "output_data": output_data,
                "elapsed_ms": elapsed_ms
            }
            
            with open("logs/fallback_log.jsonl", "a", encoding="utf-8") as f:
                f.write(json.dumps(fallback_entry, ensure_ascii=False) + "\n")
                
        except Exception as e:
            print(f"‚ùå –î–∞–∂–µ fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {e}", file=sys.stderr)

    def log_topic_status(self, topic_text: str, business_theme: str, status: str = "pending", client_id: str = "nikolay"):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–º—É –≤ –∞—Ä—Ö–∏–≤ —Ç–µ–º"""
        try:
            topic_entry = {
                "topic_text": topic_text,
                "business_theme": business_theme,
                "status": status,
                "client_id": client_id,
                "generated_by": "chief-editor"
            }
            
            result = self.client.table('topics_archive').insert(topic_entry).execute()
            
            if result.data:
                return result.data[0]['id']
            return None
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ç–µ–º—ã –≤ –∞—Ä—Ö–∏–≤: {e}", file=sys.stderr)
            return None

    def get_topics_archive(self, business_theme: Optional[str] = None, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞—Ä—Ö–∏–≤ —Ç–µ–º –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            query = self.client.table('topics_archive').select("*").order('created_at', desc=True).limit(limit)
            
            if business_theme:
                query = query.eq('business_theme', business_theme)
            
            result = query.execute()
            return result.data or []
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞ —Ç–µ–º: {e}", file=sys.stderr)
            return []

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
logger = SupabaseLogger()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
def log_agent_action(agent_name: str, event_type: str, stage: Optional[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –∞–≥–µ–Ω—Ç–æ–≤
    """
    def decorator(func):
        @wraps(func)
        async def async_wrapper(*args, **kwargs):
            start_time = time.time()
            topic_id = kwargs.get('topic_id') or str(uuid.uuid4())
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                result = await func(*args, **kwargs)
                
                elapsed_ms = int((time.time() - start_time) * 1000)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º input/output –¥–∞–Ω–Ω—ã–µ
                input_data = {"args": str(args[1:]), "kwargs": kwargs}  # args[0] —ç—Ç–æ self
                output_data = {"result": str(result)[:1000]}  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏
                reporting_blocks_present = False
                if isinstance(result, dict) and "post_text" in result:
                    text = result["post_text"]
                    reporting_blocks_present = any(block in text for block in [
                        "üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´:",
                        "üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:",
                        "üîé –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò:",
                        "üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø:"
                    ])
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                logger.log_event(
                    agent_name=agent_name,
                    event_type=event_type,
                    input_data=input_data,
                    output_data=output_data,
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage=stage,
                    status="success",
                    reporting_blocks_present=reporting_blocks_present
                )
                
                return result
                
            except Exception as e:
                elapsed_ms = int((time.time() - start_time) * 1000)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                logger.log_event(
                    agent_name=agent_name,
                    event_type=event_type,
                    input_data={"args": str(args[1:]), "kwargs": kwargs},
                    output_data={"error": str(e)},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage=stage,
                    status="error",
                    error_message=str(e)
                )
                
                raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
        
        @wraps(func)
        def sync_wrapper(*args, **kwargs):
            # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
            start_time = time.time()
            topic_id = kwargs.get('topic_id') or str(uuid.uuid4())
            
            try:
                result = func(*args, **kwargs)
                elapsed_ms = int((time.time() - start_time) * 1000)
                
                logger.log_event(
                    agent_name=agent_name,
                    event_type=event_type,
                    input_data={"args": str(args[1:]), "kwargs": kwargs},
                    output_data={"result": str(result)[:1000]},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage=stage,
                    status="success"
                )
                
                return result
                
            except Exception as e:
                elapsed_ms = int((time.time() - start_time) * 1000)
                
                logger.log_event(
                    agent_name=agent_name,
                    event_type=event_type,
                    input_data={"args": str(args[1:]), "kwargs": kwargs},
                    output_data={"error": str(e)},
                    elapsed_ms=elapsed_ms,
                    topic_id=topic_id,
                    stage=stage,
                    status="error",
                    error_message=str(e)
                )
                
                raise
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π wrapper
        return async_wrapper if asyncio.iscoroutinefunction(func) else sync_wrapper
    
    return decorator
