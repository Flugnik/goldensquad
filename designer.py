# designer.py - –í–µ—Ä—Å–∏—è 2.0. –ê–¥—Ä–∏–∞–Ω, "–ú–∞—ç—Å—Ç—Ä–æ –í–∏–∑—É–∞–ª–∞" —Å API –Ω–∞ FastAPI.
# –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–∑—ã.

import asyncio
import os
import sys
import fal_client
import requests
from datetime import datetime
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class CreateImageRequest(BaseModel):
    task_from_chief: str
    post_text: str
    topic: str # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ (–ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π) ---
class Designer:
    def __init__(self):
        self.generation_model = "fal-ai/flux-pro"
        self.personality = self.load_personality()
        print(f"‚úÖ –î–∏–∑–∞–π–Ω–µ—Ä v2.0 ({self.personality['name']}) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {self.generation_model}", file=sys.stderr)
        self.fal_api_key = os.getenv('FAL_KEY')
        self.constitution = self.personality.get('constitution')

    def load_personality(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç "—Å–ª–µ–ø–æ–∫ –ª–∏—á–Ω–æ—Å—Ç–∏" –î–∏–∑–∞–π–Ω–µ—Ä–∞."""
        return {
            "name": "–ê–¥—Ä–∏–∞–Ω, '–ú–∞—ç—Å—Ç—Ä–æ –í–∏–∑—É–∞–ª–∞'",
            "constitution": """–¢—ã ‚Äî –î–∏–∑–∞–π–Ω–µ—Ä –ê–¥—Ä–∏–∞–Ω, ¬´–ú–∞—ç—Å—Ç—Ä–æ –í–∏–∑—É–∞–ª–∞¬ª. –¢–≤–æ—è –º–∏—Å—Å–∏—è ‚Äî –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ç–µ–∫—Å—Ç –≤ –º–æ—â–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —è–∑—ã–∫. –¢—ã —Å–æ–∑–¥–∞–µ—à—å –Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∞ –æ–±—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–∏–ª–∏–≤–∞—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ.

–¢–≤–æ–∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1.  **–í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–æ—Ä–∏—Ç–µ–ª–ª–∏–Ω–≥:** –¢—ã –Ω–µ –∏–ª–ª—é—Å—Ç—Ä–∏—Ä—É–µ—à—å, –∞ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –∏—Å—Ç–æ—Ä–∏—é.
2.  **–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç:** –£ —Ç–µ–±—è –≤—Ä–æ–∂–¥–µ–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è.
3.  **–ì–ª—É–±–∏–Ω–∞ –∏ –º–µ—Ç–∞—Ñ–æ—Ä–∞:** –¢—ã –∏—â–µ—à—å –Ω–µ –±—É–∫–≤–∞–ª—å–Ω—ã–µ, –∞ –º–µ—Ç–∞—Ñ–æ—Ä–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–∑—ã.
4.  **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ:** –¢—ã –≤ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–µ –≤–ª–∞–¥–µ–µ—à—å –ø–µ—Ä–µ–¥–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."""
        }

    async def create_image(self, task_from_chief, post_text):
        """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç –®–µ—Ñ–∞ –∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞."""
        generation_prompt = f"""
        **–ó–∞–¥–∞–Ω–∏–µ –æ—Ç –®–µ—Ñ–∞-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:** {task_from_chief}
        **–¢–µ–∫—Å—Ç –æ—Ç –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞:** "{post_text}"

        **–¢–≤–æ—è –∑–∞–¥–∞—á–∞, –ú–∞—ç—Å—Ç—Ä–æ:**
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—É—Ç—å –∏ —ç–º–æ—Ü–∏—é —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ù–∞–π–¥–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –º–µ—Ç–∞—Ñ–æ—Ä—É. –°–æ–∑–¥–∞–π —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å—Ç–∞–Ω–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–º –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ–º —ç—Ç–æ–π –∏–¥–µ–∏.
        """
        print(f"üé® –ú–∞—ç—Å—Ç—Ä–æ –ê–¥—Ä–∏–∞–Ω –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞–Ω–∏–µ. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–º–ø—Ç –≤ {self.generation_model}...", file=sys.stderr)
        try:
            loop = asyncio.get_running_loop()
            result = await loop.run_in_executor(
                None, 
                lambda: fal_client.run(self.generation_model, arguments={"prompt": generation_prompt})
            )
            image_url = result['images'][0]['url']
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {image_url}", file=sys.stderr)
            return {"image_url": image_url}
        except Exception as e:
            return {"error": str(e)}

    async def save_approved_image(self, image_url, topic):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"results/ready_for_publish/image_{topic.replace(' ', '_')}_{timestamp}.png"
        # ... (–ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        return {"image_path": filename}

# --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ FastAPI –∏ –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ ---
app = FastAPI()
designer = Designer()

# --- API Endpoints (—Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞) ---
@app.post("/create_image")
async def api_create_image(request: CreateImageRequest):
    """API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    result = await designer.create_image(request.task_from_chief, request.post_text)
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è, –∞ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL
    return result

# --- –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –î–∏–∑–∞–π–Ω–µ—Ä–∞ –ê–¥—Ä–∏–∞–Ω–∞...")
    uvicorn.run(app, host="0.0.0.0", port=8002) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8002
