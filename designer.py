# designer.py - –í–µ—Ä—Å–∏—è 3.1. –ê–¥—Ä–∏–∞–Ω —Å –ø–æ–ª–Ω–æ–π constitution-–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π, –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞–º–∏ –∏ Supabase –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
import asyncio
import os
import sys
import json
import traceback
import anthropic
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn
from dotenv import load_dotenv
from typing import Optional

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.supabase_logger import log_agent_action, logger

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class CreateVisualRequest(BaseModel):
    task_from_chief: str
    post_text: str = ""
    topic: str = ""
    topic_id: str = ""

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ ---
class DesignerAgent:
    def __init__(self):
        self.model_name = os.getenv("DESIGNER_MODEL", "claude-3-7-sonnet-20250219")
        self.client = anthropic.AsyncClient(api_key=os.getenv("CLAUDE_API_KEY"))
        self.constitution = self.load_constitution()
        if not self.constitution:
            raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å constitution. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º.")

    def load_constitution(self):
        constitution = {}
        constitution_status = {}

        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ constitution.json
            with open("constitution.json", "r", encoding="utf-8-sig") as f:
                constitution_data = json.load(f)
            constitution["professional_core"] = constitution_data.get("professional_core", "")
            constitution["agent_dna"] = constitution_data.get("agent_dna", {})
            constitution["client_dna"] = constitution_data.get("client_dna", "")
            constitution["imperatives"] = constitution_data.get("imperatives", {})

            constitution_status["constitution.json"] = "loaded"

            # –ó–∞–≥—Ä—É–∑–∫–∞ topics_archive.json
            try:
                with open("topics_archive.json", "r", encoding="utf-8-sig") as f:
                    constitution["topics_archive"] = json.load(f)
                constitution_status["topics_archive.json"] = "loaded"
            except Exception as e:
                print(f"‚ö†Ô∏è topics_archive.json –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω: {e}")
                constitution["topics_archive"] = {}
                constitution_status["topics_archive.json"] = "error"

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
            try:
                logger.log_event(
                    agent_name="designer",
                    event_type="constitution_loaded",
                    input_data={"files_to_load": list(constitution.keys())},
                    output_data={"constitution_status": constitution_status},
                    elapsed_ms=0,
                    stage="initialization",
                    status="success",
                    constitution_files=constitution_status
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞: {e}", file=sys.stderr)

            print(f"‚úÖ –î–∏–∑–∞–π–Ω–µ—Ä v3.1 (–ê–¥—Ä–∏–∞–Ω) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: {self.model_name}")
            return constitution

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ constitution: {e}")
            traceback.print_exc(file=sys.stderr)
            return {}

    def build_system_prompt(self, task_from_chief, post_text, topic=""):
        base_prompt = f"""[–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –Ø–î–†–û –î–ò–ó–ê–ô–ù–ï–†–ê:]{self.constitution['professional_core']}[–î–ù–ö –î–ò–ó–ê–ô–ù–ï–†–ê:]{json.dumps(self.constitution['agent_dna'], ensure_ascii=False, indent=2) if self.constitution['agent_dna'] else '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}[–î–ù–ö –ö–õ–ò–ï–ù–¢–ê:]{self.constitution['client_dna']}[–ó–ê–î–ê–ù–ò–ï –û–¢ –®–ï–§–ê:]{task_from_chief}[–¢–ï–ö–°–¢ –û–¢ –ö–û–ü–ò–†–ê–ô–¢–ï–†–ê:]{post_text}–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û:- –¢—ã –¥–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞—Ç—å –∏–º–ø–µ—Ä–∞—Ç–∏–≤—ã –¥–∏–∑–∞–π–Ω–µ—Ä–∞ (—Å–º. constitution).- –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –±–ª–æ–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏:- üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´: (—É–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã)- üîç –ü–†–û–í–ï–†–ö–ê –í–ò–ó–£–ê–õ–ê: (–∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–ù–ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–¥–∞—á–∞–º)- üîé –ò–°–¢–û–ß–ù–ò–ö–ò –í–ò–ó–£–ê–õ–ê: (–æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤/—Ä–µ—Ñ–µ—Ä–µ–Ω—Å–æ–≤)- üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø: (–∏–Ω—Å–∞–π—Ç—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é)- –ì–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –ù–ê –ê–ù–ì–õ–ò–ô–°–ö–û–ú –Ø–ó–´–ö–ï –¥–ª—è external visual tools.""".strip()
        return base_prompt

    @log_agent_action(agent_name="designer", event_type="make_visual", stage="visual_creation")
    async def make_visual(self, task_from_chief, post_text, topic="", topic_id=None):
        prompt = self.build_system_prompt(task_from_chief, post_text, topic)
        try:
            response = await self.client.messages.create(
                model=self.model_name,
                max_tokens=2500,
                system="",
                messages=[{"role": "user", "content": prompt}]
            )
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            raw_content = response.content[0].text.strip()

            # –ò—â–µ–º –±–ª–æ–∫ —Å –ø—Ä–æ–º–ø—Ç–æ–º (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –æ–Ω –ø–æ—Å–ª–µ "PROMPT:" –∏–ª–∏ "Visual prompt:")
            # –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ‚Äî –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            lines = raw_content.split('\n')
            visual_prompt = None
            for line in lines:
                if line.strip().lower().startswith("prompt:") or "–∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ" in line.lower():
                    visual_prompt = line.split(":", 1)[1].strip()
                    break

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            if not visual_prompt:
                visual_prompt = raw_content[:500]  # –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "visual_result": visual_prompt,
                "full_response": raw_content,
                "topic_id": topic_id
            }
            return result

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∞: {str(e)}"
            print(error_msg, file=sys.stderr)
            traceback.print_exc(file=sys.stderr)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            try:
                logger.log_event(
                    agent_name="designer",
                    event_type="make_visual",
                    input_data={"task_from_chief": task_from_chief, "topic": topic},
                    output_data={"error": str(e)},
                    elapsed_ms=0,
                    topic_id=topic_id,
                    stage="visual_creation",
                    status="error",
                    error_message=str(e)
                )
            except Exception as log_e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ make_visual: {log_e}", file=sys.stderr)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–∞–¥–∞–µ–º
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∞", "details": str(e)}

# --- FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = FastAPI(title="Designer Agent (Adrian)")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
adrian = DesignerAgent()

@app.get("/health")
async def health():
    return {"status": "ok", "agent": "designer", "name": "Adrian"}

@app.post("/make_visual")
async def api_make_visual(request: CreateVisualRequest):
    result = await adrian.make_visual(
        task_from_chief=request.task_from_chief,
        post_text=request.post_text,
        topic=request.topic,
        topic_id=request.topic_id
    )
    return result

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –î–∏–∑–∞–π–Ω–µ—Ä–∞ –ê–¥—Ä–∏–∞–Ω–∞ v3.1 —Å Supabase –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º...")
    uvicorn.run("designer:app", host="0.0.0.0", port=8002, reload=False)