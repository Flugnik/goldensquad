# telegram_bot_fixed.py - –í–µ—Ä—Å–∏—è —Å –Ω–∞–¥–µ–∂–Ω–æ–π JSON-–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–µ–π

import asyncio
import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)
BOT_TOKEN = "8135072706:AAELQci6TsMPUhp6EBKnpqj6PjVtJsXilt8"

# --- –ê–Ω–∏–º–∞—Ü–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class ProgressIndicator:
    @staticmethod
    async def show_progress(query, steps, title):
        for i, step in enumerate(steps):
            progress_bar = "‚ñì" * (i + 1) + "‚ñë" * (len(steps) - i - 1)
            message = f"‚è≥ **{title}**\n\n{step}\n\n**–ü—Ä–æ–≥—Ä–µ—Å—Å:** [{progress_bar}] {i + 1}/{len(steps)}"
            await query.edit_message_text(message, parse_mode='Markdown')
            await asyncio.sleep(1)

# --- –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ Docker —Å JSON ---

async def call_chief_editor(command, *args):
    """–í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ —É –®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."""
    base_command = ["docker-compose", "exec", "-T", "chief-editor", "python", "-c"]
    
    # –ú—ã –ø—Ä–æ—Å–∏–º AI-–∞–≥–µ–Ω—Ç–∞ –æ–±–µ—Ä–Ω—É—Ç—å —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ JSON
    python_code = f"""
import asyncio
import json
from chief_editor import ChiefEditor

editor = ChiefEditor()
result = asyncio.run(editor.{command}({', '.join(map(repr, args))}))
# –ü–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
print(json.dumps(result, ensure_ascii=False))
"""
    try:
        print(f"üöÄ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –≤ Docker: {command}")
        process = await asyncio.create_subprocess_exec(
            *base_command, python_code,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode == 0:
            response_str = stdout.decode('utf-8').strip()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω JSON –æ—Ç Docker: {response_str}")
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π json.loads –≤–º–µ—Å—Ç–æ eval()
                return json.loads(response_str)
            except json.JSONDecodeError:
                return {"error": "–û—Ç–≤–µ—Ç –æ—Ç AI-–∞–≥–µ–Ω—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON."}
        else:
            error_message = stderr.decode('utf-8').strip()
            print(f"‚ùå –û—à–∏–±–∫–∞ Docker: {error_message}")
            return {"error": error_message or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."}
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ Docker: {e}")
        return {"error": str(e)}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç.–∫. –ª–æ–≥–∏–∫–∞ –≤—ã–Ω–µ—Å–µ–Ω–∞) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèÜ **–°–∏—Å—Ç–µ–º–∞ '–ó–æ–ª–æ—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞' –∞–∫—Ç–∏–≤–Ω–∞!**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.", parse_mode='Markdown')

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /create —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –Ω–∞–¥–µ–∂–Ω—ã–º JSON."""
    message = await update.message.reply_text("üß† **–®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Ç–µ–º—ã...**\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 10-15 —Å–µ–∫—É–Ω–¥.", parse_mode='Markdown')
    topics = await call_chief_editor("generate_topics")

    if isinstance(topics, list) and topics:
        keyboard = [
            [InlineKeyboardButton(topic[:60] + '...' if len(topic) > 60 else topic, callback_data=f"select_topic:{topic}")]
            for topic in topics
        ]
        await message.edit_text("üéØ **–®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–º—ã:**", reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        error_info = topics.get('error', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞') if isinstance(topics, dict) else str(topics)
        await message.edit_text(f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã.**\n`{error_info}`", parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    if query.data.startswith("select_topic:"):
        selected_topic = query.data.split(":", 1)[1]
        steps = [f"–°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç –Ω–∞ —Ç–µ–º—É: '{selected_topic[:30]}...'", "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", "‚úÖ –ü–æ—Å—Ç –≥–æ—Ç–æ–≤!"]
        await ProgressIndicator.show_progress(query, steps, "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞")
        result = await call_chief_editor("create_post_by_topic", selected_topic)

        if isinstance(result, dict) and "error" not in result:
            await query.edit_message_text(f"‚úÖ **–ü–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{selected_topic}' —Å–æ–∑–¥–∞–Ω!**\nüìÅ –¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: `{result.get('text_path')}`", parse_mode='Markdown')
        else:
            await query.edit_message_text(f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.**\n`{result.get('error', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker')}`", parse_mode='Markdown')

def main():
    print("ü§ñ –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("create", create_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()
