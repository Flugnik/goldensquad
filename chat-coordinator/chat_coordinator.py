# chat_coordinator.py - –ß–∏—Å—Ç—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –±–µ–∑ DNA –ª–æ–≥–∏–∫–∏
import asyncio
import aiohttp
import json
import re
import os
from typing import Dict, List, Optional
from datetime import datetime
from fastapi import FastAPI, BackgroundTasks
from telegram import Update, Message
from telegram.ext import Application, MessageHandler, filters, ContextTypes
import logging

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class GoldenSquadChat:
    def __init__(self):
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–≥–µ–Ω—Ç–∞–º –ó–æ–ª–æ—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        self.agents = {
            "leon": "http://localhost:8000",      # –®–µ—Ñ-—Ä–µ–¥–∞–∫—Ç–æ—Ä
            "alina": "http://localhost:8001",     # –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä
            "adrian": "http://localhost:8002"     # –î–∏–∑–∞–π–Ω–µ—Ä
        }

        # –†—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∞–≥–µ–Ω—Ç–æ–≤
        self.agent_names = {
            "leon": "–õ–µ–æ–Ω",
            "alina": "–ê–ª–∏–Ω–∞",
            "adrian": "–ê–¥—Ä–∏–∞–Ω"
        }

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_contexts = {}

        logger.info(
            "‚úÖ Golden Squad Chat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≥–µ–Ω—Ç–∞–º–∏: –õ–µ–æ–Ω, –ê–ª–∏–Ω–∞, –ê–¥—Ä–∏–∞–Ω")

    def parse_mentions(self, message: str) -> Dict[str, str]:
        """–ü–∞—Ä—Å–∏—Ç @-—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        mentions = {}

        agent_patterns = {
            r'@(?:leon|–ª–µ–æ–Ω|–ª–∏–æ–Ω|–õ–µ–æ–Ω|—à–µ—Ñ|–®–µ—Ñ|chief|–≥–ª–∞–≤–Ω—ã–π)': 'leon',
            r'@(?:alina|–∞–ª–∏–Ω–∞|–ê–ª–∏–Ω–∞|copywriter|–∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä|–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä)': 'alina',
            r'@(?:adrian|–∞–¥—Ä–∏–∞–Ω|–ê–¥—Ä–∏–∞–Ω|designer|–¥–∏–∑–∞–π–Ω–µ—Ä|–î–∏–∑–∞–π–Ω–µ—Ä)': 'adrian',
            r'@(?:team|–∫–æ–º–∞–Ω–¥–∞|–ö–æ–º–∞–Ω–¥–∞|–≤—Å–µ|–≤—Å–µ–º|–≤—Å–µ–π –∫–æ–º–∞–Ω–¥–µ)': 'team'
        }

        for pattern, agent in agent_patterns.items():
            if re.search(pattern, message, re.IGNORECASE):
                if agent == 'team':
                    for a in ['leon', 'alina', 'adrian']:
                        mentions[a] = message
                else:
                    mentions[agent] = message

        return mentions

    async def call_agent(self, agent: str, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞–≥–µ–Ω—Ç—É - –∞–≥–µ–Ω—Ç —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
        url = self.agents.get(agent)
        if not url:
            return f"‚ùå –ê–≥–µ–Ω—Ç {agent} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        try:
            if agent == "leon":
                data = {"message": message}
                endpoint = "/chat"

            elif agent == "alina":
                data = {"task_from_chief": message}
                endpoint = "/write_post"

            elif agent == "adrian":
                data = {
                    "task_from_chief": message,
                    "post_text": message[:100],
                    "topic": "user_request"
                }
                endpoint = "/create_image"

            async with aiohttp.ClientSession() as session:
                async with session.post(f"{url}{endpoint}", json=data, timeout=30) as response:
                    if response.status == 200:
                        result = await response.json()
                        return f"**{self.agent_names[agent]}:** {result.get('response', str(result))}"
                    else:
                        return f"‚ùå **{self.agent_names[agent]}:** –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞ {agent}: {e}")
            return f"‚ùå **{self.agent_names[agent]}:** –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∞—Ç–∞
golden_chat = GoldenSquadChat()

# Telegram Bot Handler


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
    user_id = update.effective_user.id
    message = update.message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message[:50]}...")

    mentions = golden_chat.parse_mentions(message)

    if not mentions:
        active_agent = golden_chat.user_contexts.get(user_id, "leon")
        response = await golden_chat.call_agent(active_agent, message)
        golden_chat.user_contexts[user_id] = active_agent
    else:
        responses = []
        for agent in mentions.keys():
            response = await golden_chat.call_agent(agent, message)
            responses.append(response)
        response = "\n\n".join(responses)

    try:
        await update.message.reply_text(response, parse_mode='Markdown')
    except Exception as e:
        await update.message.reply_text(response)

# FastAPI –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
app = FastAPI(title="Golden Squad Chat Coordinator", version="2.0")


@app.get("/health")
async def health():
    agent_status = {}
    for agent, url in golden_chat.agents.items():
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{url}/health", timeout=5) as response:
                    agent_status[agent] = "healthy" if response.status == 200 else "unhealthy"
        except:
            agent_status[agent] = "unreachable"

    return {
        "status": "ok",
        "service": "chat-coordinator",
        "version": "2.0",
        "agents": agent_status
    }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è


async def main():
    TELEGRAM_TOKEN = os.getenv(
        "TELEGRAM_BOT_TOKEN", "8135072706:AAELQci6TsMPUhp6EBKnpqj6PjVtJsXilt8")

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Chat Coordinator –ó–æ–ª–æ—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã v2.0...")
    logger.info(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∞–≥–µ–Ω—Ç—ã: {list(golden_chat.agents.keys())}")

    await application.run_polling(drop_pending_updates=True)

# chat_coordinator.py - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ë–ï–ó Telegram threading
if __name__ == "__main__":
    import uvicorn

    logger.info("üöÄ Golden Squad Chat Coordinator v2.0 —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    logger.info(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –∞–≥–µ–Ω—Ç—ã: {list(golden_chat.agents.keys())}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ FastAPI - —Å—Ç–∞–±–∏–ª—å–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8004,
        log_level="info"
    )
