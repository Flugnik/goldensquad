# copywriter.py - –í–µ—Ä—Å–∏—è 2.0. –ê–ª–∏–Ω–∞ –°–æ–º–æ–≤–∞ —Å API –Ω–∞ FastAPI.
# –ì–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç –®–µ—Ñ–∞ –∏ –≤–æ–ø–ª–æ—â–∞—Ç—å –∏—Ö –≤ "–∂–∏–≤–æ–µ —Å–ª–æ–≤–æ".

import asyncio
import os
import sys
import anthropic
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class WritePostRequest(BaseModel):
    task_from_chief: str
    brand_voice_info: str = ""  # –í –±—É–¥—É—â–µ–º —Ç—É—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ (–ª–æ–≥–∏–∫–∞ —Å constitution) ---
class Copywriter:
    def __init__(self):
        self.model_name = os.getenv('COPYWRITER_MODEL', 'claude-sonnet-4-20250514')
        self.constitution = self.build_constitution()
        print("=== [constitution –∑–∞–≥—Ä—É–∑–∫–∞] ===", file=sys.stderr)
        for k, v in self.constitution.items():
            print(f"{k}: {v[:150]} ...", file=sys.stderr)
        self.claude_api_key = os.getenv('CLAUDE_API_KEY')
        self.client = anthropic.AsyncAnthropic(api_key=self.claude_api_key)

    def build_constitution(self):
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–æ–≤
        return {
            "professional_core": self.load_file('personas/copywriter/Alina_Persona.txt'),
            "client_dna": self.load_file('client_profiles/nikolay_dna.txt'),
            "search_methods": self.load_file('personas/copywriter/Poisk-informacii.txt')
        }

    def load_file(self, path):
        try:
            with open(path, encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            return ""

    def build_system_prompt(self, task_from_chief, brand_voice_info):
        # –ï–¥–∏–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å constitution –∏ –∑–∞–¥–∞—á–µ–π
        return f"""
[–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –Ø–î–†–û –ö–û–ü–ò–†–ê–ô–¢–ï–†–ê:]
{self.constitution['professional_core']}

[–î–ù–ö-–∫–ª–∏–µ–Ω—Ç–∞:]
{self.constitution['client_dna']}

[–ú–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:]
{self.constitution['search_methods']}

[–ó–ê–î–ê–ù–ò–ï –û–¢ –®–ï–§–ê:]
{task_from_chief}

[–ì–û–õ–û–° –ë–†–ï–ù–î–ê/–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:]
{brand_voice_info}
""".strip()

    async def write_post(self, task_from_chief, brand_voice_info):
        prompt = self.build_system_prompt(task_from_chief, brand_voice_info)
        try:
            response = await self.client.messages.create(
                model=self.model_name,
                max_tokens=2500,
                system="",
                messages=[{"role": "user", "content": prompt}]
            )
            return {"post_text": response.content[0].text.strip()}
        except Exception as e:
            return {"error": str(e)}

# --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ FastAPI –∏ –∞–≥–µ–Ω—Ç–∞ ---
app = FastAPI()
writer = Copywriter()

# --- Health-—ç–Ω–¥–ø–æ–∏–Ω—Ç ---
@app.get("/health", tags=["system"])
async def health():
    return {"status": "ok"}

# --- API-—Ço—á–∫–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ---
@app.post("/write_post")
async def api_write_post(request: WritePostRequest):
    result = await writer.write_post(request.task_from_chief, request.brand_voice_info)
    return result

# --- –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –ê–ª–∏–Ω—ã...")
    uvicorn.run(app, host="0.0.0.0", port=8001)
