# copywriter.py - –í–µ—Ä—Å–∏—è 3.0. –ê–ª–∏–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π constitution –∏ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤ /mi
# –ì–æ—Ç–æ–≤–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –æ—Ç –®–µ—Ñ–∞ –∏ –≤–æ–ø–ª–æ—â–∞—Ç—å –∏—Ö –≤ "–∂–∏–≤–æ–µ —Å–ª–æ–≤–æ" —Å –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é.

import asyncio
import os
import sys
import json
import traceback
import anthropic
from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class WritePostRequest(BaseModel):
    task_from_chief: str
    brand_voice_info: str = ""  # –í –±—É–¥—É—â–µ–º —Ç—É—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ (–ª–æ–≥–∏–∫–∞ —Å –ø–æ–ª–Ω–æ–π constitution) ---
class Copywriter:
    def __init__(self):
        self.model_name = os.getenv('COPYWRITER_MODEL', 'claude-sonnet-4-20250514')
        self.constitution = self.build_constitution()
        
        print("=== [constitution –∑–∞–≥—Ä—É–∑–∫–∞] ===", file=sys.stderr)
        for k, v in self.constitution.items():
            if isinstance(v, dict):
                print(f"{k}: JSON —Å {len(v)} –∫–ª—é—á–∞–º–∏", file=sys.stderr)
            elif isinstance(v, list):
                print(f"{k}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(v)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", file=sys.stderr)
            else:
                print(f"{k}: {str(v)[:150]} ...", file=sys.stderr)
        
        self.claude_api_key = os.getenv('CLAUDE_API_KEY')
        self.client = anthropic.AsyncAnthropic(api_key=self.claude_api_key)

    def build_constitution(self):
        # –ü–æ–ª–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ê–ª–∏–Ω—ã
        return {
            "professional_core": self.load_file('personas/copywriter/Alina_Persona.txt'),
            "agent_dna": self.load_json('personas/copywriter/Alina_DNA.json'),
            "client_dna": self.load_file('client_profiles/nikolay_dna.txt'),
            "search_methods": self.load_file('personas/copywriter/Poisk-informacii.txt'),
            "imperatives": self.load_json('personas/copywriter/Alina_MI.json')
        }

    def load_file(self, path):
        try:
            with open(path, encoding='utf-8') as f:
                return f.read()
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}", file=sys.stderr)
            return ""

    def load_json(self, path):
        try:
            with open(path, encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}", file=sys.stderr)
            return {}
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON {path}: {e}", file=sys.stderr)
            return {}

    def build_system_prompt(self, task_from_chief, brand_voice_info):
        # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç —Å constitution
        base_prompt = f"""
[–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –Ø–î–†–û –ö–û–ü–ò–†–ê–ô–¢–ï–†–ê:]
{self.constitution['professional_core']}

[–î–ù–ö –ê–ì–ï–ù–¢–ê –ê–õ–ò–ù–ê:]
{json.dumps(self.constitution['agent_dna'], ensure_ascii=False, indent=2) if self.constitution['agent_dna'] else '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}

[–î–ù–ö –ö–õ–ò–ï–ù–¢–ê:]
{self.constitution['client_dna']}

[–ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò:]
{self.constitution['search_methods']}

[–ó–ê–î–ê–ù–ò–ï –û–¢ –®–ï–§–ê:]
{task_from_chief}

[–ì–û–õ–û–° –ë–†–ï–ù–î–ê/–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:]
{brand_voice_info}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –±–ª–æ–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞–º:
- üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´: (—É–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
- üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø: (–∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–ù–ö –∫–ª–∏–µ–Ω—Ç–∞)
- üîé –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò: (–µ—Å–ª–∏ –∏—Å–∫–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
- üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø: (–∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è)
""".strip()
        
        return base_prompt

    def extract_imperatives_summary(self):
        """–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        if not self.constitution['imperatives'] or 'imperatives' not in self.constitution['imperatives']:
            return "–ò–º–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
        
        critical_imperatives = [
            imp for imp in self.constitution['imperatives']['imperatives'] 
            if imp.get('priority') == 'critical'
        ]
        
        return "\n".join([f"- {imp['title']}: {imp['text'][:100]}..." for imp in critical_imperatives[:3]])

    async def write_post(self, task_from_chief, brand_voice_info):
        prompt = self.build_system_prompt(task_from_chief, brand_voice_info)
        
        try:
            response = await self.client.messages.create(
                model=self.model_name,
                max_tokens=3000,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
                system="",
                messages=[{"role": "user", "content": prompt}]
            )
            
            post_content = response.content[0].text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–ª–æ–∫–æ–≤ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
            has_reporting = any(block in post_content for block in [
                "üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´:", 
                "üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:",
                "üîé –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò:",
                "üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø:"
            ])
            
            result = {"post_text": post_content}
            
            if not has_reporting:
                result["warning"] = "–ê–ª–∏–Ω–∞ –Ω–µ –≤–∫–ª—é—á–∏–ª–∞ –±–ª–æ–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞–º"
            
            return result
            
        except Exception as e:
            traceback.print_exc(file=sys.stderr)
            return {"error": str(e)}

# --- –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ FastAPI –∏ –∞–≥–µ–Ω—Ç–∞ ---
app = FastAPI(title="Golden Squad ‚Äî Copywriter Alina API", version="3.0")
writer = Copywriter()

# --- Health-—ç–Ω–¥–ø–æ–∏–Ω—Ç —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π ---
@app.get("/health", tags=["system"])
async def health():
    constitution_status = {
        "professional_core": bool(writer.constitution['professional_core']),
        "agent_dna": bool(writer.constitution['agent_dna']),
        "client_dna": bool(writer.constitution['client_dna']),
        "search_methods": bool(writer.constitution['search_methods']),
        "imperatives": bool(writer.constitution['imperatives'])
    }
    
    return {
        "status": "ok",
        "constitution_loaded": constitution_status,
        "model": writer.model_name
    }

# --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤ ---
@app.get("/imperatives", tags=["debug"])
async def show_imperatives():
    if not writer.constitution['imperatives']:
        return {"error": "–ò–º–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    
    return {
        "total_imperatives": len(writer.constitution['imperatives'].get('imperatives', [])),
        "activation_triggers": writer.constitution['imperatives'].get('activation_triggers', []),
        "required_files": writer.constitution['imperatives'].get('required_files', []),
        "critical_imperatives": [
            imp['title'] for imp in writer.constitution['imperatives'].get('imperatives', [])
            if imp.get('priority') == 'critical'
        ]
    }

# --- API-—Ç–æ—á–∫–∞ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ ---
@app.post("/write_post")
async def api_write_post(request: WritePostRequest):
    result = await writer.write_post(request.task_from_chief, request.brand_voice_info)
    return result

# --- –¢–æ—á–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ ---
if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –ê–ª–∏–Ω—ã v3.0...")
    uvicorn.run(app, host="0.0.0.0", port=8001)
