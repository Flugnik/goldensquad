# copywriter.py - –í–µ—Ä—Å–∏—è 3.2. –ê–ª–∏–Ω–∞ —Å OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é

import asyncio
import os
import sys
import json
import traceback
import uuid
import httpx
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import uvicorn
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.supabase_logger import log_agent_action, logger

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
OPENROUTER_API_URL = "https://openrouter.ai/api/v1/chat/completions"

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API (Pydantic) ---
class WritePostRequest(BaseModel):
    task_from_chief: str
    brand_voice_info: str = ""
    topic_id: str = ""

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≥–µ–Ω—Ç–∞ ---
class Copywriter:
    def __init__(self):
        # –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ anthropic/claude-3-5-sonnet-20241022 (OpenRouter —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è)
        self.model_name = os.getenv('COPYWRITER_MODEL', 'anthropic/claude-sonnet-4')
        self.api_key = os.getenv("OPENROUTER_API_KEY")
        
        if not self.api_key:
            raise RuntimeError("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
            
        self.constitution = self.build_constitution()
        
        print("=== [constitution –∑–∞–≥—Ä—É–∑–∫–∞] ===", file=sys.stderr)
        for k, v in self.constitution.items():
            if isinstance(v, dict):
                print(f"{k}: JSON —Å {len(v)} –∫–ª—é—á–∞–º–∏", file=sys.stderr)
            elif isinstance(v, list):
                print(f"{k}: —Å–ø–∏—Å–æ–∫ –∏–∑ {len(v)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤", file=sys.stderr)
            else:
                print(f"{k}: {str(v)[:150]} ...", file=sys.stderr)
        
        print(f"‚úÖ –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä v3.2 (–ê–ª–∏–Ω–∞) –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ú–æ–¥–µ–ª—å: {self.model_name}", file=sys.stderr)

    def build_constitution(self):
        constitution = {
            "professional_core": self.load_file('personas/copywriter/Alina_Persona.txt'),
            "agent_dna": self.load_json('personas/copywriter/Alina_DNA.json'),
            "client_dna": self.load_file('client_profiles/nikolay_dna.txt'),
            "search_methods": self.load_file('personas/copywriter/Poisk-informacii.txt'),
            "imperatives": self.load_json('personas/copywriter/Alina_MI.json')
        }
        
        constitution_status = {
            "professional_core": bool(constitution['professional_core']),
            "agent_dna": bool(constitution['agent_dna']),
            "client_dna": bool(constitution['client_dna']),
            "search_methods": bool(constitution['search_methods']),
            "imperatives": bool(constitution['imperatives'])
        }
        
        try:
            logger.log_event(
                agent_name="copywriter",
                event_type="constitution_loaded",
                input_data={"files_to_load": list(constitution.keys())},
                output_data={"constitution_status": constitution_status},
                elapsed_ms=0,
                stage="initialization",
                status="success",
                constitution_files=constitution_status
            )
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", file=sys.stderr)
        
        return constitution

    def load_file(self, path):
        try:
            with open(path, encoding='utf-8-sig') as f:
                return f.read()
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}", file=sys.stderr)
            return ""

    def load_json(self, path):
        try:
            with open(path, encoding='utf-8-sig') as f:
                return json.load(f)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}", file=sys.stderr)
            return {}
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON {path}: {e}", file=sys.stderr)
            return {}

    def build_system_prompt(self, task_from_chief, brand_voice_info):
        base_prompt = f"""
[–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ï –Ø–î–†–û –ö–û–ü–ò–†–ê–ô–¢–ï–†–ê:]
{self.constitution['professional_core']}

[–î–ù–ö –ê–ì–ï–ù–¢–ê –ê–õ–ò–ù–ê:]
{json.dumps(self.constitution['agent_dna'], ensure_ascii=False, indent=2) if self.constitution['agent_dna'] else '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}

[–î–ù–ö –ö–õ–ò–ï–ù–¢–ê:]
{self.constitution['client_dna']}

[–ú–ï–¢–û–î–´ –ü–û–ò–°–ö–ê –ò–ù–§–û–†–ú–ê–¶–ò–ò:]
{self.constitution['search_methods']}

[–ó–ê–î–ê–ù–ò–ï –û–¢ –®–ï–§–ê:]
{task_from_chief}

[–ì–û–õ–û–° –ë–†–ï–ù–î–ê/–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:]
{brand_voice_info}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –±–ª–æ–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞–º:
- üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´: (—É–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã)
- üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø: (–∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –î–ù–ö –∫–ª–∏–µ–Ω—Ç–∞)
- üîé –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò: (–µ—Å–ª–∏ –∏—Å–∫–∞–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
- üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø: (–∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è)
""".strip()
        
        return base_prompt

    async def _ask_openrouter(self, prompt: str, max_tokens: int = 3000) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ OpenRouter —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://goldensquad.ai"
        }

        payload = {
            "model": self.model_name,
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "max_tokens": max_tokens
        }

        try:
            async with httpx.AsyncClient(timeout=60.0) as client:
                response = await client.post(OPENROUTER_API_URL, json=payload, headers=headers)
                response.raise_for_status()
                data = response.json()
                return data["choices"][0]["message"]["content"].strip()
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ OpenRouter: {str(e)}"
            print(error_msg, file=sys.stderr)
            traceback.print_exc(file=sys.stderr)
            try:
                logger.log_event(
                    agent_name="copywriter",
                    event_type="openrouter_api_error",
                    input_data={"model": self.model_name},
                    output_data={"error": str(e)},
                    status="error",
                    error_message=str(e)
                )
            except Exception as log_e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –æ—à–∏–±–∫–∏ API: {log_e}", file=sys.stderr)
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ò–ò-–º–æ–¥–µ–ª—å—é")

    @log_agent_action(agent_name="copywriter", event_type="write_post", stage="content_creation")
    async def write_post(self, task_from_chief, brand_voice_info, topic_id=None):
        prompt = self.build_system_prompt(task_from_chief, brand_voice_info)
        
        try:
            post_content = await self._ask_openrouter(prompt, max_tokens=3000)
            
            reporting_blocks = [
                "üìã –†–ê–ë–û–ß–ò–ï –§–ê–ô–õ–´:", 
                "üîç –ü–†–û–í–ï–†–ö–ê –°–û–û–¢–í–ï–¢–°–¢–í–ò–Ø:",
                "üîé –ò–°–¢–û–ß–ù–ò–ö–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò:",
                "üìö –í–´–í–û–î–´ –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø:"
            ]
            
            has_reporting = any(block in post_content for block in reporting_blocks)
            present_blocks = [block for block in reporting_blocks if block in post_content]
            
            result = {
                "post_text": post_content,
                "reporting_analysis": {
                    "blocks_present": present_blocks,
                    "total_blocks": len(present_blocks),
                    "compliance_score": len(present_blocks) / len(reporting_blocks)
                }
            }
            
            if not has_reporting:
                result["warning"] = "–ê–ª–∏–Ω–∞ –Ω–µ –≤–∫–ª—é—á–∏–ª–∞ –±–ª–æ–∫–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–∞–º"
            
            try:
                logger.log_event(
                    agent_name="copywriter",
                    event_type="imperatives_check",
                    input_data={"required_blocks": reporting_blocks},
                    output_data={"present_blocks": present_blocks, "compliance_score": result["reporting_analysis"]["compliance_score"]},
                    elapsed_ms=0,
                    topic_id=topic_id,
                    stage="quality_control",
                    status="success" if has_reporting else "warning",
                    imperatives_check=has_reporting,
                    reporting_blocks_present=has_reporting
                )
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤: {e}", file=sys.stderr)
            
            return result
            
        except Exception as e:
            traceback.print_exc(file=sys.stderr)
            return {"error": str(e)}

# --- FastAPI –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
app = FastAPI(title="Golden Squad ‚Äî Copywriter Alina API", version="3.2")
alina = Copywriter()

@app.get("/health", tags=["system"])
async def health():
    constitution_status = {
        "professional_core": bool(alina.constitution['professional_core']),
        "agent_dna": bool(alina.constitution['agent_dna']),
        "client_dna": bool(alina.constitution['client_dna']),
        "search_methods": bool(alina.constitution['search_methods']),
        "imperatives": bool(alina.constitution['imperatives'])
    }
    
    try:
        logger.log_event(
            agent_name="copywriter",
            event_type="health_check",
            input_data={"endpoint": "/health"},
            output_data={"constitution_status": constitution_status, "model": alina.model_name},
            elapsed_ms=0,
            stage="monitoring",
            status="success"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ health-check: {e}", file=sys.stderr)
    
    return {
        "status": "ok",
        "agent": "copywriter",
        "name": "Alina",
        "model": alina.model_name,
        "constitution_loaded": constitution_status,
        "supabase_logging": "enabled"
    }

@app.get("/imperatives", tags=["debug"])
async def show_imperatives():
    if not alina.constitution['imperatives']:
        return {"error": "–ò–º–ø–µ—Ä–∞—Ç–∏–≤—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"}
    
    imperatives_data = {
        "total_imperatives": len(alina.constitution['imperatives'].get('imperatives', [])),
        "activation_triggers": alina.constitution['imperatives'].get('activation_triggers', []),
        "required_files": alina.constitution['imperatives'].get('required_files', []),
        "critical_imperatives": [
            imp['title'] for imp in alina.constitution['imperatives'].get('imperatives', [])
            if imp.get('priority') == 'critical'
        ]
    }
    
    try:
        logger.log_event(
            agent_name="copywriter",
            event_type="imperatives_request",
            input_data={"endpoint": "/imperatives"},
            output_data=imperatives_data,
            elapsed_ms=0,
            stage="debugging",
            status="success"
        )
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ –∏–º–ø–µ—Ä–∞—Ç–∏–≤–æ–≤: {e}", file=sys.stderr)
    
    return imperatives_data

@app.post("/write_post")
async def api_write_post(request: WritePostRequest):
    topic_id = request.topic_id or None
    
    result = await alina.write_post(
        request.task_from_chief, 
        request.brand_voice_info,
        topic_id=topic_id
    )
    
    if topic_id:
        result["topic_id"] = topic_id
    
    return result

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–µ—Ä–≤–µ—Ä –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä–∞ –ê–ª–∏–Ω—ã v3.2 —Å OpenRouter –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π...")
    uvicorn.run("copywriter:app", host="0.0.0.0", port=8001, reload=False)
